// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: data.proto

package main

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	pmongo "github.com/bit-one/mgd-proto/pmongo"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Data struct {
	Id                   *pmongo.ObjectId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	BoolValue            bool               `protobuf:"varint,2,opt,name=boolValue,proto3" json:"boolValue,omitempty"`
	BoolProtoValue       *types.BoolValue   `protobuf:"bytes,3,opt,name=boolProtoValue,proto3" json:"boolProtoValue,omitempty"`
	BytesValue           []byte             `protobuf:"bytes,4,opt,name=bytesValue,proto3" json:"bytesValue,omitempty"`
	BytesProtoValue      *types.BytesValue  `protobuf:"bytes,5,opt,name=bytesProtoValue,proto3" json:"bytesProtoValue,omitempty"`
	DoubleValue          float64            `protobuf:"fixed64,6,opt,name=doubleValue,proto3" json:"doubleValue,omitempty"`
	DoubleProtoValue     *types.DoubleValue `protobuf:"bytes,7,opt,name=doubleProtoValue,proto3" json:"doubleProtoValue,omitempty"`
	FloatValue           float32            `protobuf:"fixed32,8,opt,name=floatValue,proto3" json:"floatValue,omitempty"`
	FloatProtoValue      *types.FloatValue  `protobuf:"bytes,9,opt,name=floatProtoValue,proto3" json:"floatProtoValue,omitempty"`
	Int32Value           int32              `protobuf:"varint,10,opt,name=int32Value,proto3" json:"int32Value,omitempty"`
	Int32ProtoValue      *types.Int32Value  `protobuf:"bytes,11,opt,name=int32ProtoValue,proto3" json:"int32ProtoValue,omitempty"`
	Int64Value           int64              `protobuf:"varint,12,opt,name=int64Value,proto3" json:"int64Value,omitempty"`
	Int64ProtoValue      *types.Int64Value  `protobuf:"bytes,13,opt,name=int64ProtoValue,proto3" json:"int64ProtoValue,omitempty"`
	StringValue          string             `protobuf:"bytes,14,opt,name=stringValue,proto3" json:"stringValue,omitempty"`
	StringProtoValue     *types.StringValue `protobuf:"bytes,15,opt,name=stringProtoValue,proto3" json:"stringProtoValue,omitempty"`
	Uint32Value          uint32             `protobuf:"varint,16,opt,name=uint32Value,proto3" json:"uint32Value,omitempty"`
	Uint32ProtoValue     *types.UInt32Value `protobuf:"bytes,17,opt,name=uint32ProtoValue,proto3" json:"uint32ProtoValue,omitempty"`
	Uint64Value          uint64             `protobuf:"varint,18,opt,name=uint64Value,proto3" json:"uint64Value,omitempty"`
	Uint64ProtoValue     *types.UInt64Value `protobuf:"bytes,19,opt,name=uint64ProtoValue,proto3" json:"uint64ProtoValue,omitempty"`
	Timestamp            *types.Timestamp   `protobuf:"bytes,20,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Listvalue            *types.ListValue   `protobuf:"bytes,21,opt,name=listvalue,proto3" json:"listvalue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-" bson:"-"`
	XXX_unrecognized     []byte             `json:"-" bson:"-"`
	XXX_sizecache        int32              `json:"-" bson:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{0}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetId() *pmongo.ObjectId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Data) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *Data) GetBoolProtoValue() *types.BoolValue {
	if m != nil {
		return m.BoolProtoValue
	}
	return nil
}

func (m *Data) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

func (m *Data) GetBytesProtoValue() *types.BytesValue {
	if m != nil {
		return m.BytesProtoValue
	}
	return nil
}

func (m *Data) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *Data) GetDoubleProtoValue() *types.DoubleValue {
	if m != nil {
		return m.DoubleProtoValue
	}
	return nil
}

func (m *Data) GetFloatValue() float32 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *Data) GetFloatProtoValue() *types.FloatValue {
	if m != nil {
		return m.FloatProtoValue
	}
	return nil
}

func (m *Data) GetInt32Value() int32 {
	if m != nil {
		return m.Int32Value
	}
	return 0
}

func (m *Data) GetInt32ProtoValue() *types.Int32Value {
	if m != nil {
		return m.Int32ProtoValue
	}
	return nil
}

func (m *Data) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *Data) GetInt64ProtoValue() *types.Int64Value {
	if m != nil {
		return m.Int64ProtoValue
	}
	return nil
}

func (m *Data) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *Data) GetStringProtoValue() *types.StringValue {
	if m != nil {
		return m.StringProtoValue
	}
	return nil
}

func (m *Data) GetUint32Value() uint32 {
	if m != nil {
		return m.Uint32Value
	}
	return 0
}

func (m *Data) GetUint32ProtoValue() *types.UInt32Value {
	if m != nil {
		return m.Uint32ProtoValue
	}
	return nil
}

func (m *Data) GetUint64Value() uint64 {
	if m != nil {
		return m.Uint64Value
	}
	return 0
}

func (m *Data) GetUint64ProtoValue() *types.UInt64Value {
	if m != nil {
		return m.Uint64ProtoValue
	}
	return nil
}

func (m *Data) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Data) GetListvalue() *types.ListValue {
	if m != nil {
		return m.Listvalue
	}
	return nil
}

func init() {
	proto.RegisterType((*Data)(nil), "main.Data")
}

func init() { proto.RegisterFile("data.proto", fileDescriptor_871986018790d2fd) }

var fileDescriptor_871986018790d2fd = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x71, 0xd7, 0x8d, 0xd6, 0xdd, 0x47, 0x31, 0x9b, 0x54, 0x95, 0x2a, 0xb3, 0x7a, 0xe5,
	0x0b, 0x48, 0xa5, 0x6d, 0x9a, 0xd0, 0x2e, 0xab, 0x81, 0x98, 0x84, 0x04, 0x3a, 0x7c, 0xdc, 0xa2,
	0xa4, 0xc9, 0x82, 0x51, 0x52, 0x47, 0x89, 0x03, 0xda, 0x9b, 0xf0, 0x48, 0x5c, 0xf2, 0x04, 0x08,
	0x15, 0x9e, 0x80, 0x27, 0x40, 0xb6, 0x93, 0xc6, 0x24, 0x0a, 0x77, 0x3d, 0x7f, 0x9f, 0xdf, 0xf9,
	0x25, 0xc7, 0x6d, 0x31, 0x0e, 0x3c, 0xe9, 0xb9, 0x69, 0x26, 0xa4, 0x20, 0xfd, 0xc4, 0xe3, 0xeb,
	0xe9, 0x93, 0x88, 0xcb, 0x8f, 0x85, 0xef, 0xae, 0x44, 0xb2, 0x88, 0x44, 0x24, 0x16, 0xfa, 0xd0,
	0x2f, 0x6e, 0x75, 0xa5, 0x0b, 0xfd, 0xc9, 0x40, 0xd3, 0xd3, 0x48, 0x88, 0x28, 0x0e, 0xeb, 0x2e,
	0xc9, 0x93, 0x30, 0x97, 0x5e, 0x92, 0x96, 0x0d, 0x4e, 0xb3, 0xe1, 0x4b, 0xe6, 0xa5, 0x69, 0x98,
	0xe5, 0xe5, 0xf9, 0xac, 0x79, 0x9e, 0xcb, 0xac, 0x58, 0xc9, 0xf2, 0xf4, 0x24, 0x4d, 0xc4, 0x3a,
	0x12, 0x0b, 0xe1, 0x7f, 0x0a, 0x57, 0x92, 0x07, 0x26, 0x9e, 0xff, 0x1e, 0xe0, 0xfe, 0xb5, 0x27,
	0x3d, 0x72, 0x85, 0x7b, 0x3c, 0x98, 0x20, 0x8a, 0xd8, 0xe8, 0x6c, 0xec, 0x9a, 0x66, 0xf7, 0x95,
	0x6e, 0xbe, 0x09, 0x96, 0x93, 0x3f, 0x3f, 0x4e, 0x8f, 0xfd, 0x5c, 0xac, 0xaf, 0xe6, 0x1f, 0x78,
	0xf0, 0x58, 0x24, 0x5c, 0x86, 0x49, 0x2a, 0xef, 0xe6, 0xd0, 0xe3, 0x01, 0x99, 0xe1, 0xa1, 0x2f,
	0x44, 0xfc, 0xde, 0x8b, 0x8b, 0x70, 0xd2, 0xa3, 0x88, 0x0d, 0xa0, 0x0e, 0xc8, 0x12, 0x1f, 0xaa,
	0xe2, 0xb5, 0xf2, 0x99, 0x96, 0x1d, 0x6d, 0x99, 0xba, 0xe6, 0x81, 0xdd, 0xea, 0x81, 0xdd, 0x65,
	0xc5, 0x40, 0x83, 0x20, 0x0e, 0xc6, 0xfe, 0x9d, 0x0c, 0x73, 0xc3, 0xf7, 0x29, 0x62, 0xfb, 0x60,
	0x25, 0xe4, 0x19, 0x3e, 0xd2, 0x95, 0x25, 0xd9, 0xd5, 0x92, 0x47, 0x6d, 0xc9, 0x96, 0x82, 0x26,
	0x43, 0x28, 0x1e, 0x05, 0xa2, 0xf0, 0xe3, 0xd0, 0x8c, 0xd8, 0xa3, 0x88, 0x21, 0xb0, 0x23, 0xf2,
	0x02, 0x8f, 0x4d, 0x69, 0x99, 0xee, 0x6b, 0xd3, 0xac, 0x65, 0xba, 0xae, 0x39, 0x68, 0x51, 0xea,
	0x95, 0x6e, 0x63, 0xe1, 0x49, 0x33, 0x63, 0x40, 0x11, 0xeb, 0x81, 0x95, 0xa8, 0x57, 0xd2, 0x95,
	0x25, 0x1a, 0x76, 0xbc, 0xd2, 0xf3, 0x2d, 0x05, 0x4d, 0x46, 0x69, 0xf8, 0x5a, 0x9e, 0x9f, 0x99,
	0x09, 0x98, 0x22, 0xb6, 0x0b, 0x56, 0xa2, 0x34, 0xba, 0xb2, 0x34, 0xa3, 0x0e, 0xcd, 0xcd, 0x96,
	0x82, 0x26, 0x53, 0x6a, 0x2e, 0x2f, 0xcc, 0x84, 0x7d, 0x8a, 0xd8, 0x0e, 0x58, 0x49, 0xa9, 0xb9,
	0xbc, 0xb0, 0x34, 0x07, 0xdd, 0x9a, 0x92, 0x82, 0x26, 0xa3, 0x2e, 0x28, 0x97, 0x19, 0x5f, 0x47,
	0x66, 0xc4, 0x21, 0x45, 0x6c, 0x08, 0x76, 0xa4, 0x2e, 0xc8, 0x94, 0x96, 0xe9, 0xa8, 0xe3, 0x82,
	0xde, 0xd4, 0x1c, 0xb4, 0x28, 0xe5, 0x2a, 0xac, 0xd5, 0x8d, 0x29, 0x62, 0x07, 0x60, 0x47, 0xca,
	0x55, 0x34, 0x97, 0xf7, 0xa0, 0xc3, 0xf5, 0xce, 0xda, 0x5e, 0x8b, 0xaa, 0x5c, 0xd5, 0xfe, 0x08,
	0x45, 0xac, 0x0f, 0x76, 0x54, 0xb9, 0xfe, 0xd9, 0xe0, 0xc3, 0xff, 0xb8, 0xaa, 0x15, 0xb6, 0x28,
	0xf2, 0x14, 0x0f, 0xb7, 0x7f, 0x2d, 0x93, 0xe3, 0x8e, 0x9f, 0xe2, 0xdb, 0xaa, 0x03, 0xea, 0x66,
	0x45, 0xc6, 0x3c, 0x97, 0x9f, 0xb5, 0xfc, 0xa4, 0x83, 0x7c, 0xc9, 0xf3, 0xf2, 0xbb, 0x58, 0x37,
	0x2f, 0xc7, 0xdf, 0x36, 0x0e, 0xfa, 0xbe, 0x71, 0xd0, 0xcf, 0x8d, 0x83, 0xbe, 0xfe, 0x72, 0xee,
	0xf9, 0x7b, 0x1a, 0x38, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xd5, 0x83, 0xf6, 0x38, 0x05,
	0x00, 0x00,
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listvalue != nil {
		{
			size, err := m.Listvalue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Uint64ProtoValue != nil {
		{
			size, err := m.Uint64ProtoValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Uint64Value != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.Uint64Value))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Uint32ProtoValue != nil {
		{
			size, err := m.Uint32ProtoValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Uint32Value != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.Uint32Value))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.StringProtoValue != nil {
		{
			size, err := m.StringProtoValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.StringValue) > 0 {
		i -= len(m.StringValue)
		copy(dAtA[i:], m.StringValue)
		i = encodeVarintData(dAtA, i, uint64(len(m.StringValue)))
		i--
		dAtA[i] = 0x72
	}
	if m.Int64ProtoValue != nil {
		{
			size, err := m.Int64ProtoValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Int64Value != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.Int64Value))
		i--
		dAtA[i] = 0x60
	}
	if m.Int32ProtoValue != nil {
		{
			size, err := m.Int32ProtoValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Int32Value != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.Int32Value))
		i--
		dAtA[i] = 0x50
	}
	if m.FloatProtoValue != nil {
		{
			size, err := m.FloatProtoValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.FloatValue != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FloatValue))))
		i--
		dAtA[i] = 0x45
	}
	if m.DoubleProtoValue != nil {
		{
			size, err := m.DoubleProtoValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.DoubleValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoubleValue))))
		i--
		dAtA[i] = 0x31
	}
	if m.BytesProtoValue != nil {
		{
			size, err := m.BytesProtoValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BytesValue) > 0 {
		i -= len(m.BytesValue)
		copy(dAtA[i:], m.BytesValue)
		i = encodeVarintData(dAtA, i, uint64(len(m.BytesValue)))
		i--
		dAtA[i] = 0x22
	}
	if m.BoolProtoValue != nil {
		{
			size, err := m.BoolProtoValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BoolValue {
		i--
		if m.BoolValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintData(dAtA []byte, offset int, v uint64) int {
	offset -= sovData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.BoolValue {
		n += 2
	}
	if m.BoolProtoValue != nil {
		l = m.BoolProtoValue.Size()
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.BytesValue)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.BytesProtoValue != nil {
		l = m.BytesProtoValue.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.DoubleValue != 0 {
		n += 9
	}
	if m.DoubleProtoValue != nil {
		l = m.DoubleProtoValue.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.FloatValue != 0 {
		n += 5
	}
	if m.FloatProtoValue != nil {
		l = m.FloatProtoValue.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.Int32Value != 0 {
		n += 1 + sovData(uint64(m.Int32Value))
	}
	if m.Int32ProtoValue != nil {
		l = m.Int32ProtoValue.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.Int64Value != 0 {
		n += 1 + sovData(uint64(m.Int64Value))
	}
	if m.Int64ProtoValue != nil {
		l = m.Int64ProtoValue.Size()
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.StringValue)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.StringProtoValue != nil {
		l = m.StringProtoValue.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.Uint32Value != 0 {
		n += 2 + sovData(uint64(m.Uint32Value))
	}
	if m.Uint32ProtoValue != nil {
		l = m.Uint32ProtoValue.Size()
		n += 2 + l + sovData(uint64(l))
	}
	if m.Uint64Value != 0 {
		n += 2 + sovData(uint64(m.Uint64Value))
	}
	if m.Uint64ProtoValue != nil {
		l = m.Uint64ProtoValue.Size()
		n += 2 + l + sovData(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 2 + l + sovData(uint64(l))
	}
	if m.Listvalue != nil {
		l = m.Listvalue.Size()
		n += 2 + l + sovData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozData(x uint64) (n int) {
	return sovData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &pmongo.ObjectId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolValue = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolProtoValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoolProtoValue == nil {
				m.BoolProtoValue = &types.BoolValue{}
			}
			if err := m.BoolProtoValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesValue = append(m.BytesValue[:0], dAtA[iNdEx:postIndex]...)
			if m.BytesValue == nil {
				m.BytesValue = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesProtoValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BytesProtoValue == nil {
				m.BytesProtoValue = &types.BytesValue{}
			}
			if err := m.BytesProtoValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DoubleValue = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleProtoValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DoubleProtoValue == nil {
				m.DoubleProtoValue = &types.DoubleValue{}
			}
			if err := m.DoubleProtoValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FloatValue = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatProtoValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FloatProtoValue == nil {
				m.FloatProtoValue = &types.FloatValue{}
			}
			if err := m.FloatProtoValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Value", wireType)
			}
			m.Int32Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32ProtoValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Int32ProtoValue == nil {
				m.Int32ProtoValue = &types.Int32Value{}
			}
			if err := m.Int32ProtoValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			m.Int64Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64ProtoValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Int64ProtoValue == nil {
				m.Int64ProtoValue = &types.Int64Value{}
			}
			if err := m.Int64ProtoValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringProtoValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StringProtoValue == nil {
				m.StringProtoValue = &types.StringValue{}
			}
			if err := m.StringProtoValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32Value", wireType)
			}
			m.Uint32Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint32Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32ProtoValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uint32ProtoValue == nil {
				m.Uint32ProtoValue = &types.UInt32Value{}
			}
			if err := m.Uint32ProtoValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64Value", wireType)
			}
			m.Uint64Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint64Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64ProtoValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uint64ProtoValue == nil {
				m.Uint64ProtoValue = &types.UInt64Value{}
			}
			if err := m.Uint64ProtoValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listvalue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Listvalue == nil {
				m.Listvalue = &types.ListValue{}
			}
			if err := m.Listvalue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupData = fmt.Errorf("proto: unexpected end of group")
)
